#!/usr/bin/env python3
#
# A simple CLI script for the Kconfig library
#

import argparse
import json
import logging
import sys

from kconfig import Kconfig

# -----------------------------------------------------------------------------
# Helper functions

def _dec(name, *args, **kwargs):
    def _decorator(func):
        # Because of the sematics of decorator composition if we just append
        # to the options list positional options will appear to be backwards.
        func.__dict__.setdefault(name, []).insert(0, (args, kwargs))
        return func
    return _decorator


def add_help(*args, **kwargs):
    return _dec('help', *args, **kwargs)

def add_arg(*args, **kwargs):
    return _dec('arg', *args, **kwargs)

def error(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

# -----------------------------------------------------------------------------
# Subcommands

@add_help('List all symbol data')
def do_symbol_list(kconfig, _args):
    print('\n'.join(sorted(kconfig.symbols.keys())))

@add_help('List all symbols and show their help texts')
def do_help_list(kconfig, _args):
    for name in sorted(kconfig.symbols.keys()):
        print()
        print(name)
        symbol_help = kconfig.symbols[name]['help']
        if not symbol_help:
            symbol_help = ['No help']
        print('\n'.join(['  ' + h for h in symbol_help]))

@add_help('Show symbol data')
@add_arg('name', help='Symbol name')
def do_symbol_show(kconfig, args):
    if args.name.startswith('CONFIG_'):
        args.name = args.name[7:]
    if args.name not in kconfig.symbols:
        error('Invalid symbol name: {}'.format(args.name))
        sys.exit(1)
    print(json.dumps(kconfig.symbols[args.name], indent=4))

@add_help('Show the config option that enables the provided module')
@add_arg('name', nargs='+', help='Kernel module name')
def do_module_config_show(kconfig, args):
    for name in args.name:
        print(kconfig.module_to_config(name) or '')

@add_help('Show the config option that enables the provided module')
@add_arg('name', help='Symbol name')
def do_config_module_show(kconfig, args):
    print(kconfig.config_to_module(args.name) or '')

@add_help('Dump the symbol data to the screen')
def do_dump(kconfig, _args):
    print(json.dumps(kconfig.symbols, indent=4))

@add_help('Test the different regex expressions')
def do_test(_kconfig, _args):
    pass

# -----------------------------------------------------------------------------
# Main entry point

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--arch', default='amd64',
                        help='Kernel architecture (default: amd64)')
    parser.add_argument('-l', '--log-level', choices=('0', '1', '2', '3', '4'),
                        default='3',
                        help='Set the logging level (0: critical, 1: error, ' +
                        '2: warning, 3: info, 4: debug), default: 3')
    parser.add_argument('-s', '--ksource', default='.',
                        help='Path of the kernel source tree (default: ./)')
    parser.add_argument('-c', '--kconfig', default='Kconfig',
                        help='Kconfig filename (default: Kconfig)')

    # Add subparsers for the subcommands and walk through the 'do_' functions
    subparsers = parser.add_subparsers(dest='subcommand', title='subcommands',
                                       required=True)
    module = sys.modules[__name__]
    for attr in (a for a in dir(module) if a.startswith('do_')):
        cmd_name = attr[3:].replace('_', '-')
        cmd_cb = getattr(module, attr)
        cmd_help = getattr(cmd_cb, 'help')[0][0][0]
        cmd_args = getattr(cmd_cb, 'arg', [])

        sparser = subparsers.add_parser(cmd_name, help=cmd_help,
                                        description=cmd_help, add_help=False)
        sparser.add_argument('-h', '--help', action='help')
        for (args, kwargs) in cmd_args:
            sparser.add_argument(*args, **kwargs)
        sparser.set_defaults(func=cmd_cb)

    # Parse the arguments
    args = parser.parse_args()

    # Map the logging levels
    log_levels = {
        '0': logging.CRITICAL,
        '1': logging.ERROR,
        '2': logging.WARNING,
        '3': logging.INFO,
        '4': logging.DEBUG,
    }

    # Parse the Kconfig tree and call the subcommand
    kconfig = Kconfig(args.ksource, args.kconfig, args.arch,
                      log_level=log_levels[args.log_level],
                      test=(args.subcommand == 'test'))
    args.func(kconfig, args)
