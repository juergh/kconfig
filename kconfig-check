#!/usr/bin/env python3

import argparse
import re
import sys

def print_line(keys, show, prefix, line):
    for k in keys:
        if k in show:
            print(prefix + line)
            return

def check_kconfig(kconfig, show):
    retval = 0

    is_choice = False
    is_help = False
    help_indent = ''
    help_first_indent = ''

    prev_cont = False
    cont = False
    cont_indent = ''

    ifs = []
    menus = []

    with open(kconfig) as fh:
        for line in fh:
            line = line.rstrip()

            # Line continuation
            prev_cont = cont
            cont = line.endswith('\\')
            if not prev_cont:
                cont_indent = ''

            # Empty line or comment
            if line == '' or re.search(r'^\t*#(\s|$)', line):
                print_line(['a'], show, '    ', line)
                continue

            # Line indentation
            m = re.search(r'^([\t ]+)', line)
            indent = m.group(1) if m else ''

            # -----------------------------------------------------------------
            # Continued lines

            if cont_indent:
                if indent == cont_indent:
                    print_line(['a'], show, '    ', line)
                    continue

                if indent.startswith(cont_indent):
                    reval = 1
                    print_line(['a', 'l'], show, 'll  ', line)
                    continue

                reval = 1
                print_line(['a', 'l'], show, 'LL  ', line)
                continue

            # -----------------------------------------------------------------
            # 1st level keywords

            # if <EXPR>
            m = re.search(r'^if (.+)$', line)
            if m:
                ifs.append(m.group(1))
                is_help = False
                print_line(['a'], show, '    ', line)
                continue

            # endif # <EXPR>
            m = re.search(r'^endif # (.+)$', line)
            if m:
                is_help = False
                if m.group(1) == ifs.pop():
                    print_line(['a'], show, '    ', line)
                    continue

                retval = 1
                print_line(['a', 'i'], show, 'II  ', line)
                continue

            # if|endif
            if re.search(r'^(if|endif)', line):
                is_help = False
                retval = 1
                print_line(['a', 'i'], show, 'II  ', line)
                continue

            # menu "<TEXT>"
            m = re.search(r'^menu (".+")$', line)
            if m:
                menus.append(m.group(1))
                is_help = False
                print_line(['a'], show, '    ', line)
                continue

            # endmenu # "<TEXT>"
            m = re.search(r'^endmenu # (.+)$', line)
            if m:
                is_help = False
                if m.group(1) == menus.pop():
                    print_line(['a'], show, '    ', line)
                    continue

                retval = 1
                print_line(['a', 'm'], show, 'MM  ', line)
                continue

            # menu|endmenu
            if re.search(r'^(menu(?!config)|endmenu)', line):
                is_help = False
                retval = 1
                print_line(['a', 'm'], show, 'MM  ', line)
                continue

            # choice
            if line == 'choice':
                is_help = False
                is_choice = True
                print_line(['a'], show, '    ', line)
                continue

            # endchoice
            if line == 'endchoice':
                is_help = False
                is_choice = False
                print_line(['a'], show, '    ', line)
                continue

            # choice|endchoice
            if re.search(r'^(choice|endchoice)', line):
                is_help = False
                is_choice = False
                retval = 1
                print_line(['a', 'c'], show, 'CC  ', line)
                continue

            # Remaining keywords
            if re.search(r'^(' +
                         r'(config|menuconfig|depends on) |' +
                         r'(source|comment|mainmenu) "' +
                         r')', line):
                is_help = False
                print_line(['a'], show, '    ', line)
                continue

            # -----------------------------------------------------------------
            # 2nd level keywords

            # help
            if line == '\thelp':
                is_help = True
                help_indent = '\t  '
                help_first_indent = ''
                print_line(['a'], show, '    ', line)
                continue

            # config
            if is_choice and line.startswith('\tconfig '):
                cont_indent = '\t\t'
                is_help = False
                print_line(['a'], show, '    ', line)
                continue

            # Remaining keywords
            if re.search(r'^\t(' +
                         r'(default|def_bool|depends on|imply|range|select) [^\']|' +
                         r'prompt "|' +
                         r'(bool|hex|int|string|tristate)($| ")' +
                         r')', line):
                cont_indent = '\t\t'
                is_help = False
                print_line(['a'], show, '    ', line)
                continue

            # -----------------------------------------------------------------
            # 3rd level keywords

            if is_choice:

                # help
                if line == '\t\thelp':
                    is_help = True
                    help_indent = '\t\t  '
                    help_first_indent = ''
                    print_line(['a'], show, '    ', line)
                    continue

                # Remaining keywords
                if re.search(r'^\t\t(' +
                             r'(depends on|select) [^\']|' +
                             r'bool($| ")' +
                             r')', line):
                    cont_indent = '\t\t\t'
                    is_help = False
                    print_line(['a'], show, '    ', line)
                    continue

            # -----------------------------------------------------------------
            # Help text

            if is_help:
                if not help_first_indent:
                    # First help line
                    help_first_indent = indent
                    if indent == help_indent:
                        print_line(['a'], show, '    ', line)
                        continue

                    retval = 1
                    print_line(['a', 'h'], show, 'HH  ', line)
                    continue

                if indent == help_indent:
                    print_line(['a'], show, '    ', line)
                    continue

                if ((indent.startswith(help_indent) or
                     indent.startswith(help_indent[:-2] + '\t'))):
                    retval = 1
                    print_line(['a', 'h'], show, 'hh  ', line)
                    continue

                retval = 1
                print_line(['a', 'h'], show, 'HH  ', line)
                continue

            # -----------------------------------------------------------------
            # Wrong quotes

            if re.search(r'^\t(hex|bool|default) \'', line):
                is_help = False
                retval = 1
                print_line(['a', 'q'], show, 'QQ  ', line)
                continue

            # -----------------------------------------------------------------
            # Leading whitespaces

            if line.startswith(' '):
                retval = 1
                print_line(['a', 'w'], show, 'WW  ', line)
                continue

            # -----------------------------------------------------------------
            # Last resort

            retval = 1
            print_line(['a', 'x'], show, 'XX  ', line)

    return retval

parser = argparse.ArgumentParser(description='''
Check kernel Kconfig files for potental formatting issues. Lines with issues
are prefixed with two capital letters that identify the detected issue:

  CC: choice/endchoice formatting
  HH: Help text indentation
  II: if/endif formatting
  LL: Continued line indentation
  MM: menu/endmenu formatting
  QQ: Wrong quotes
  WW: Leading whitespace(s)
  XX: Unspecified indentation/formatting issue
''', formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('kconfig', nargs='+', help='kernel Kconfig file')
parser.add_argument('-s', '--show', default='chilmqwx',
                    help='''
show only lines with specific issues:
  c: choice/endchoice
  h: help text
  i: if/endif
  l: line continuation
  m: menu/endmenu
  q: quotes
  w: whitespace(s)
  x: unspecified

  a: show all lines
default is 'chimqwx'
''')
args = parser.parse_args()

first = True
retval = 0
for kconfig in args.kconfig:
    if len(args.kconfig) > 1:
        if first:
            first = False
        else:
            print()
        print('-- ' + kconfig + ' --')
    retval |= check_kconfig(kconfig, args.show)

sys.exit(retval)
